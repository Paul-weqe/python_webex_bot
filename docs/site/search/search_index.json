{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"python_webex_bot A python3 library meant to help you create a cisco webex teams bot and take advantage of some of the features available to these bots. Most of the python libraries setup for webex have been lacking in terms of connecting you to a webhook and this aims at solving that Installation and setup The following are items this documentation assumes you already have installed: - virtualenv - python3 - ngrok Step 1: setup the virtual environment to initialize the virtual environment, run the following command in your Command Line or Command Prompt virtualenv venv then we activate it: Windows venv\\Scripts\\activate Linux source venv/bin/activate and there, you have your virtual environment setup and ready for action Step 2: install python_webex_bot while still in your activated virtual environment, run the following command to install python_webex_bot via pip: pip install python_webex_bot then download ngrok which will be used in the concurrent steps Quickstart Lets get a simple bot up, running and responsive on our local machine. Step 1: Create the bot on Cisco Webex If you haven't already, create your Webex account. Then head on to create your bot You should be provided with an access token for the bot. Take this access token and place it in your environment variable as auth_token. this can be done via your Command prompt or Command Line as: export auth_token=my_auth_token If you're on Windows , run the following on the command prompt: set auth_token=my_auth_token replace my_auth_token with your bots access token This is a crutial part of running your bot as the python_webex_bot library uses this to identify your bot If you still have some questions on environment variables, why we need them and how to use them, this may be a good start Step 2: setup ngrok in a different terminal from the one used in steps 1 and 2, navigate to the folder where you have the ngrok placed. Then run the following command: ngrok http 5000 This should produce an output similar to the one shown below: Session Status online Session Expires 7 hours, 59 minutes Update update available (version 2.3.25, Ctrl-U to update) Version 2.3.18 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://87a942a1.ngrok.io -> http://localhost:5000 Forwarding https://87a942a1.ngrok.io -> http://localhost:5000 Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 Now you are ready for the quest Step 3: create the python file and run it Create a python file where you intend to run the bot. In my case, I will name my file run.py copy and paste the following code: from python_webex.v1.Bot import Bot from python_webex import webhook bot = Bot() # the program will automatically know the bot being referred to y the auth_token # create a webhook to expose it to the internet # rememer that url we got from step 2, this is where we use it. In my case it was http://87a942a1.ngrok.io. # We will be creating a webhook that will be listening when messages are sent bot.create_webhook( name=\"quickstart_webhook\", target_url=\"http://87a942a1.ngrok.io\", resource=\"messages\", event=\"created\" ) # we create a function that responds when someone says hi # the room_id will automatically be filled with the webhook. Do not forget it @bot.on_hears(\"hi\") def greet_back(room_id=None): return bot.send_message(room_id=room_id, text=\"Hi, how are you doing?\") # We create a default response in case anyone types anything else that we have not set a response for # this is done using * [ don't ask me what happend when someone sends '*' as the message, that's on my TODO] @bot.on_hears(\"*\") def default_response(room_id=None): return bot.send_message(room_id=room_id, text=\"Sorry, could not understand that\") # make the webhook know the bot to be listening for, and we are done webhook.bot = bot if __name__ == \"__main__\": webhook.app.run(debug=True) # don't keep debug=True in production Now, when we text our bot \"hi\", it will respond with \"Hi, how are you doing?\" And when we text anything else, like \"When can we meet up?\" it will respond with \"Sorry, I could not understand that\"","title":"python_webex_bot"},{"location":"#python_webex_bot","text":"A python3 library meant to help you create a cisco webex teams bot and take advantage of some of the features available to these bots. Most of the python libraries setup for webex have been lacking in terms of connecting you to a webhook and this aims at solving that","title":"python_webex_bot"},{"location":"#installation-and-setup","text":"The following are items this documentation assumes you already have installed: - virtualenv - python3 - ngrok","title":"Installation and setup"},{"location":"#step-1-setup-the-virtual-environment","text":"to initialize the virtual environment, run the following command in your Command Line or Command Prompt virtualenv venv then we activate it: Windows venv\\Scripts\\activate Linux source venv/bin/activate and there, you have your virtual environment setup and ready for action","title":"Step 1: setup the virtual environment"},{"location":"#step-2-install-python_webex_bot","text":"while still in your activated virtual environment, run the following command to install python_webex_bot via pip: pip install python_webex_bot then download ngrok which will be used in the concurrent steps","title":"Step 2: install python_webex_bot"},{"location":"#quickstart","text":"Lets get a simple bot up, running and responsive on our local machine.","title":"Quickstart"},{"location":"#step-1-create-the-bot-on-cisco-webex","text":"If you haven't already, create your Webex account. Then head on to create your bot You should be provided with an access token for the bot. Take this access token and place it in your environment variable as auth_token. this can be done via your Command prompt or Command Line as: export auth_token=my_auth_token If you're on Windows , run the following on the command prompt: set auth_token=my_auth_token replace my_auth_token with your bots access token This is a crutial part of running your bot as the python_webex_bot library uses this to identify your bot If you still have some questions on environment variables, why we need them and how to use them, this may be a good start","title":"Step 1: Create the bot on Cisco Webex"},{"location":"#step-2-setup-ngrok","text":"in a different terminal from the one used in steps 1 and 2, navigate to the folder where you have the ngrok placed. Then run the following command: ngrok http 5000 This should produce an output similar to the one shown below: Session Status online Session Expires 7 hours, 59 minutes Update update available (version 2.3.25, Ctrl-U to update) Version 2.3.18 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://87a942a1.ngrok.io -> http://localhost:5000 Forwarding https://87a942a1.ngrok.io -> http://localhost:5000 Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 Now you are ready for the quest","title":"Step 2: setup ngrok"},{"location":"#step-3-create-the-python-file-and-run-it","text":"Create a python file where you intend to run the bot. In my case, I will name my file run.py copy and paste the following code: from python_webex.v1.Bot import Bot from python_webex import webhook bot = Bot() # the program will automatically know the bot being referred to y the auth_token # create a webhook to expose it to the internet # rememer that url we got from step 2, this is where we use it. In my case it was http://87a942a1.ngrok.io. # We will be creating a webhook that will be listening when messages are sent bot.create_webhook( name=\"quickstart_webhook\", target_url=\"http://87a942a1.ngrok.io\", resource=\"messages\", event=\"created\" ) # we create a function that responds when someone says hi # the room_id will automatically be filled with the webhook. Do not forget it @bot.on_hears(\"hi\") def greet_back(room_id=None): return bot.send_message(room_id=room_id, text=\"Hi, how are you doing?\") # We create a default response in case anyone types anything else that we have not set a response for # this is done using * [ don't ask me what happend when someone sends '*' as the message, that's on my TODO] @bot.on_hears(\"*\") def default_response(room_id=None): return bot.send_message(room_id=room_id, text=\"Sorry, could not understand that\") # make the webhook know the bot to be listening for, and we are done webhook.bot = bot if __name__ == \"__main__\": webhook.app.run(debug=True) # don't keep debug=True in production Now, when we text our bot \"hi\", it will respond with \"Hi, how are you doing?\" And when we text anything else, like \"When can we meet up?\" it will respond with \"Sorry, I could not understand that\"","title":"Step 3: create the python file and run it"},{"location":"cards/","text":"Cards Create & Send Blank Card Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Cards are meant to increase interactivity during the chat. They can be used, for example to send a form that the bot would like an end user to respond to. In this instance, we are sending a blank card to the user, which is pretty much useless. This can from python.webex.v1.Card import Card from python.webex.v1.Bot import Bot bot = Bot() card = Card() bot.send_card(card=card, room_id=\"room-id\") Add text items on the card Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. The card we just sent above is pretty much useless. If we are to send a card, the user needs to be able to interact with the card and the bot should be able to read whatever has been input on the user side. from python_webex.v1.Card import Card from python_webex.v1.Bot import Bot bot = Bot() bot.create_webhook( name='attachment-response-2', target_url=\"[your-bot-url]/attachment-response\", resource=\"attachmentActions\", event=\"created\" ) Card = Card() bot.send_card(card=card, room_id='room-id') Create Card Webhook Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Here, we create a webhook for the card responses. For instance, if one fills a form that has been sent on a card, the response will be sent to the specific webhook. from python_webex.v1.Card import Card from python_webex.v1.Bot import Bot bot = Bot() bot.create_webhook( name='attachment-response-2', target_url=\"[your-bot-url]/attachment-response\", resource=\"attachmentActions\", event=\"created\" ) Note: always make sure to setup this webhook to be whatever link you will be using and append /attachment-response to it. For example, if you are using 'https://abc.com', your value on target_url will be 'https://abc.com/attachment-response' Listen for response on card Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Now, what happens when the user has filled a card form and the response has been sent to the webhook, how do we get the information about the card that has been filled from our end? Here is how: from python_webex.v1.Card import Card from python_webex.v1.Bot imporrt Bot from pprint import pprint from python_webex import webhook bot = Bot() card = Card() card.add_input_text( input_id=\"first-name-input\", input_placeholder=\"First Name\" ) card.add_input_text( input_id=\"last-name-input\", input_placeholder=\"Last Name\" ) card.add_submit_action_btn( title=\"Submit\" ) message = bot.send_card(card=card, room_id=\"room-id\") message_id = message.json()['id'] @bot.attachment_response(message_id=message_id) def respond_to_card(msg): pprint(msg) webhook.bot = bot if __name__ == \"__main__\": webhook.app.run(debug=True)","title":"Cards"},{"location":"cards/#cards","text":"","title":"Cards"},{"location":"cards/#create-send-blank-card","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Cards are meant to increase interactivity during the chat. They can be used, for example to send a form that the bot would like an end user to respond to. In this instance, we are sending a blank card to the user, which is pretty much useless. This can from python.webex.v1.Card import Card from python.webex.v1.Bot import Bot bot = Bot() card = Card() bot.send_card(card=card, room_id=\"room-id\")","title":"Create &amp; Send Blank Card"},{"location":"cards/#add-text-items-on-the-card","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. The card we just sent above is pretty much useless. If we are to send a card, the user needs to be able to interact with the card and the bot should be able to read whatever has been input on the user side. from python_webex.v1.Card import Card from python_webex.v1.Bot import Bot bot = Bot() bot.create_webhook( name='attachment-response-2', target_url=\"[your-bot-url]/attachment-response\", resource=\"attachmentActions\", event=\"created\" ) Card = Card() bot.send_card(card=card, room_id='room-id')","title":"Add text items on the card"},{"location":"cards/#create-card-webhook","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Here, we create a webhook for the card responses. For instance, if one fills a form that has been sent on a card, the response will be sent to the specific webhook. from python_webex.v1.Card import Card from python_webex.v1.Bot import Bot bot = Bot() bot.create_webhook( name='attachment-response-2', target_url=\"[your-bot-url]/attachment-response\", resource=\"attachmentActions\", event=\"created\" ) Note: always make sure to setup this webhook to be whatever link you will be using and append /attachment-response to it. For example, if you are using 'https://abc.com', your value on target_url will be 'https://abc.com/attachment-response'","title":"Create Card Webhook"},{"location":"cards/#listen-for-response-on-card","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Now, what happens when the user has filled a card form and the response has been sent to the webhook, how do we get the information about the card that has been filled from our end? Here is how: from python_webex.v1.Card import Card from python_webex.v1.Bot imporrt Bot from pprint import pprint from python_webex import webhook bot = Bot() card = Card() card.add_input_text( input_id=\"first-name-input\", input_placeholder=\"First Name\" ) card.add_input_text( input_id=\"last-name-input\", input_placeholder=\"Last Name\" ) card.add_submit_action_btn( title=\"Submit\" ) message = bot.send_card(card=card, room_id=\"room-id\") message_id = message.json()['id'] @bot.attachment_response(message_id=message_id) def respond_to_card(msg): pprint(msg) webhook.bot = bot if __name__ == \"__main__\": webhook.app.run(debug=True)","title":"Listen for response on card"},{"location":"messages/","text":"Messages Create Message Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Want to send a message from your bot to a specific room? No worries, here is how: from python_webex.v1.Bot import Bot bot = Bot() bot.send_message(to_person_email='person-email@gmail.com', text='This is some text') # or bot.send_message(room_id='someroomid', text='This is the text') # you can use either `room_id` will be given priority over `to_person_email` when both are used at the same time. Attach files with message Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. To attach a files when sending a message, do this: from python_webex.v1.Bot import Bot bot = Bot() bot.send_message(room_id='room-id', text='I am sending a file', files=['https://image.shutterstock.com/image-photo/white-transparent-leaf-on-mirror-260nw-1029171697.jpg']) Note the files parameter may be a list, but only one field is allowed. Why Exactly? No Idea, ask Webex. And also you can only keep URI's on the files field and not a path to a file in a local directory. Send message with Markdown Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. When we want to style our messages e.g using bold, italivs and so on, we can use markups. Have a look here to read more about how markups work. So, this is how we can send a markup: from python_webex.v1.Bot import Bot bot = Bot() markdown = \"\"\" *This is italic*\\n **This is bold**\\n `This looks like code` \"\"\" bot.send_markdown( to_person_email=\"some-email@gmail.com\", markdown = markdown ) Get messages Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. This lists all the messages that have been received by the bot on a specific room. This is how we can get these details: from python_webex.v1.Bot import Bot from pprint import pprint bot = Bot() pprint(bot.get_messages(room_id=\"room-id\").json()) Get Direct Messages Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Gets a list of all messages sent in 1:1 rooms. This is basically a list of all the bot's DMs with a particular individual, done by providing the person's ID. This is how this is done: from python_webex.v1.Bot import Bot from pprint import pprint bot = Bot() pprint(bot.get_direct_messages(person_id=\"person-id\").json()) Get Message Details Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Gives you details about a specific message with ID message-id from python_webex.v1.Bot import Bot from pprint import pprint bot = Bot() pprin(bot.get_message_details(message_id=\"message-id\").json()) Delete Message Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Deletes a specific message with ID message-id from python_webex.v1.Bot import Bot from pprint import pprint bot = Bot() bot.delete_message(message_id='message-id') Setup Webhook for incoming messages Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. If your bot need to be constantly listening for incoming messages, you need to set up a webhook. To set up a webhook, you need an address that is available via the public internet. You can use ngrok for this. If you have ngrok downloaded, type ./ngrok http 5000 if you are on Linux . Otherwise, type ngrok.exe http 5000 if you are on Windows . This will give you an output as such: Session Expires 7 hours, 6 minutes Version 2.3.35 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://cff51342.ngrok.io -> http://localhost:5000 Forwarding https://cff51342.ngrok.io -> http://localhost:5000 Now, you can open up your text editor and type in the following: from python_webex.v1.Bot import Bot from python_webex import webhook bot = Bot() bot.create_webhook( name='some-normal-webhook', target_url='https://cff51342.ngrok.io', resource='messages', event='created' ) webhook.bot = bot if __name__ == \"__main__\": webhook.app.run(debug=True) You willl now be constantly listening for any incoming message via the message that has been sent to the bot. Set default action for incoming message Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. When you receive a message, it normally comes with text. The following is how to set a default response whatever text is sent to the bot: from python_webex.v1.Bot import Bot bot = Bot() @bot.on_hears(\"*\") def default_on_hears_function(room_id=None): bot.send_message(room_id=room_id, text=\"This is the default response for the message that has been sent\") Set default listener for incoming files Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. You want your bot to receive files? So do many other people. We need to have a way to handle how these files are received and handled. So here is how we set the default function for handling incoming files: from python_webex.v1.Bot import Bot from python_webex import webhook bot = Bot() @bot.set_default_file_response() def default_file_response(files, room_id=None): bot.send_message(room_id=room_id, text='this is the default response for an attached file') webhook.bot = bot if __name__ == \"__main__\": webhook.app.run(debug=True) If you need to attach anything in the response, refer to the previous tutorial about attaching files with messages Set listener for specific text attached with file Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. What do you do when someone send you a file attached with a specific set of text, and you do know what you need your bot to do at this point: from python_webex.v1.Bot import Bot from python_webex import webhook bot = Bot() @bot.set_file_action(\"This is me\") def custom_response(room_id=None, files=None): print(files) bot.send_message(room_id=room_id, text=\"You look amazing\") webhook.bot = bot if __name__ == \"__main__\": webhook.app.run(debug=True) In def custom_response(room_id=None, files=None): , files represent a list of the files being sent to the bot.","title":"Messages"},{"location":"messages/#messages","text":"","title":"Messages"},{"location":"messages/#create-message","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Want to send a message from your bot to a specific room? No worries, here is how: from python_webex.v1.Bot import Bot bot = Bot() bot.send_message(to_person_email='person-email@gmail.com', text='This is some text') # or bot.send_message(room_id='someroomid', text='This is the text') # you can use either `room_id` will be given priority over `to_person_email` when both are used at the same time.","title":"Create Message"},{"location":"messages/#attach-files-with-message","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. To attach a files when sending a message, do this: from python_webex.v1.Bot import Bot bot = Bot() bot.send_message(room_id='room-id', text='I am sending a file', files=['https://image.shutterstock.com/image-photo/white-transparent-leaf-on-mirror-260nw-1029171697.jpg']) Note the files parameter may be a list, but only one field is allowed. Why Exactly? No Idea, ask Webex. And also you can only keep URI's on the files field and not a path to a file in a local directory.","title":"Attach files with message"},{"location":"messages/#send-message-with-markdown","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. When we want to style our messages e.g using bold, italivs and so on, we can use markups. Have a look here to read more about how markups work. So, this is how we can send a markup: from python_webex.v1.Bot import Bot bot = Bot() markdown = \"\"\" *This is italic*\\n **This is bold**\\n `This looks like code` \"\"\" bot.send_markdown( to_person_email=\"some-email@gmail.com\", markdown = markdown )","title":"Send message with  Markdown"},{"location":"messages/#get-messages","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. This lists all the messages that have been received by the bot on a specific room. This is how we can get these details: from python_webex.v1.Bot import Bot from pprint import pprint bot = Bot() pprint(bot.get_messages(room_id=\"room-id\").json())","title":"Get messages"},{"location":"messages/#get-direct-messages","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Gets a list of all messages sent in 1:1 rooms. This is basically a list of all the bot's DMs with a particular individual, done by providing the person's ID. This is how this is done: from python_webex.v1.Bot import Bot from pprint import pprint bot = Bot() pprint(bot.get_direct_messages(person_id=\"person-id\").json())","title":"Get Direct Messages"},{"location":"messages/#get-message-details","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Gives you details about a specific message with ID message-id from python_webex.v1.Bot import Bot from pprint import pprint bot = Bot() pprin(bot.get_message_details(message_id=\"message-id\").json())","title":"Get Message Details"},{"location":"messages/#delete-message","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Deletes a specific message with ID message-id from python_webex.v1.Bot import Bot from pprint import pprint bot = Bot() bot.delete_message(message_id='message-id')","title":"Delete Message"},{"location":"messages/#setup-webhook-for-incoming-messages","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. If your bot need to be constantly listening for incoming messages, you need to set up a webhook. To set up a webhook, you need an address that is available via the public internet. You can use ngrok for this. If you have ngrok downloaded, type ./ngrok http 5000 if you are on Linux . Otherwise, type ngrok.exe http 5000 if you are on Windows . This will give you an output as such: Session Expires 7 hours, 6 minutes Version 2.3.35 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding http://cff51342.ngrok.io -> http://localhost:5000 Forwarding https://cff51342.ngrok.io -> http://localhost:5000 Now, you can open up your text editor and type in the following: from python_webex.v1.Bot import Bot from python_webex import webhook bot = Bot() bot.create_webhook( name='some-normal-webhook', target_url='https://cff51342.ngrok.io', resource='messages', event='created' ) webhook.bot = bot if __name__ == \"__main__\": webhook.app.run(debug=True) You willl now be constantly listening for any incoming message via the message that has been sent to the bot.","title":"Setup Webhook for incoming messages"},{"location":"messages/#set-default-action-for-incoming-message","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. When you receive a message, it normally comes with text. The following is how to set a default response whatever text is sent to the bot: from python_webex.v1.Bot import Bot bot = Bot() @bot.on_hears(\"*\") def default_on_hears_function(room_id=None): bot.send_message(room_id=room_id, text=\"This is the default response for the message that has been sent\")","title":"Set default action for incoming message"},{"location":"messages/#set-default-listener-for-incoming-files","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. You want your bot to receive files? So do many other people. We need to have a way to handle how these files are received and handled. So here is how we set the default function for handling incoming files: from python_webex.v1.Bot import Bot from python_webex import webhook bot = Bot() @bot.set_default_file_response() def default_file_response(files, room_id=None): bot.send_message(room_id=room_id, text='this is the default response for an attached file') webhook.bot = bot if __name__ == \"__main__\": webhook.app.run(debug=True) If you need to attach anything in the response, refer to the previous tutorial about attaching files with messages","title":"Set default listener for incoming files"},{"location":"messages/#set-listener-for-specific-text-attached-with-file","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. What do you do when someone send you a file attached with a specific set of text, and you do know what you need your bot to do at this point: from python_webex.v1.Bot import Bot from python_webex import webhook bot = Bot() @bot.set_file_action(\"This is me\") def custom_response(room_id=None, files=None): print(files) bot.send_message(room_id=room_id, text=\"You look amazing\") webhook.bot = bot if __name__ == \"__main__\": webhook.app.run(debug=True) In def custom_response(room_id=None, files=None): , files represent a list of the files being sent to the bot.","title":"Set listener for specific text attached with file"},{"location":"rooms/","text":"Rooms Get all rooms Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on here. What we are aiming to do here is to get all the rooms that the bot is currently in. All from group rooms to individual rooms, we get all the details. Let us look at what we have to do: from python_webex.v1.Bot import Bot bot = Bot() all_rooms_response = bot.get_all_rooms() all_rooms = all_rooms_response.json() print(all_rooms) If everything works out fine you should see the following output: { 'items': [ { 'title': 'room-title', 'ownerId': 'consumer', 'id': 'room-id', 'teamId': 'team-id', # this will show if it is a group room 'lastActivity': '2019-03-29T07:36:12.214Z', 'created': '2019-03-29T07:34:21.521Z', 'isLocked': False, 'creatorId': 'creator-id', 'type': 'group' } ] } Get room details Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. This gets the details of a specific room, we can use the output from here and get a single rooms ID. We will call the room ID room_id We will use this room_id to get the details of that specific room, here is how: from python_webex.v1.Bot import Bot bot = Bot() room_id = 'someroomid' room_details_response = bot.get_room_details(room_id=room_id) room_details = room_details_response.json() print(room_details) You should see an output similar to this: { 'creatorId': 'creator-id', 'lastActivity': '2019-03-29T07:36:12.214Z', 'id': 'room-id', 'title': 'Discussion', 'created': '2019-03-29T07:34:21.521Z', 'type': 'group', 'ownerId': 'consumer', 'isLocked': False, 'teamId': 'team-id' # if the room is a team } Use this information wisely. Create Room Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Some of the functionality for creating a room is still being worked on, bear with us. The following should work for creating a room: from python_webex.v1.Bot import Bot bot = Bot() bot.create_room(title=\"Bot's room with best friend\", team_id=\"team-id\", room_type=\"something either 'direct' or 'group'\") Update Room Details Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Currently, we can only edit the title of a room. To do so, run the following script: from python_webex.v1.Bot import Bot bot = Bot() room_id = 'room-id' bot.update_room_details(room_id=room_id, title='New Title') Delete a room Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Let us wreck some havock and delete a room. This can be done through: from python_webex.v1.Bot import Bot bot = Bot() room_id = 'room-id' bot.delete_room(room_id=room_id)","title":"Rooms"},{"location":"rooms/#rooms","text":"","title":"Rooms"},{"location":"rooms/#get-all-rooms","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on here. What we are aiming to do here is to get all the rooms that the bot is currently in. All from group rooms to individual rooms, we get all the details. Let us look at what we have to do: from python_webex.v1.Bot import Bot bot = Bot() all_rooms_response = bot.get_all_rooms() all_rooms = all_rooms_response.json() print(all_rooms) If everything works out fine you should see the following output: { 'items': [ { 'title': 'room-title', 'ownerId': 'consumer', 'id': 'room-id', 'teamId': 'team-id', # this will show if it is a group room 'lastActivity': '2019-03-29T07:36:12.214Z', 'created': '2019-03-29T07:34:21.521Z', 'isLocked': False, 'creatorId': 'creator-id', 'type': 'group' } ] }","title":"Get all rooms"},{"location":"rooms/#get-room-details","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. This gets the details of a specific room, we can use the output from here and get a single rooms ID. We will call the room ID room_id We will use this room_id to get the details of that specific room, here is how: from python_webex.v1.Bot import Bot bot = Bot() room_id = 'someroomid' room_details_response = bot.get_room_details(room_id=room_id) room_details = room_details_response.json() print(room_details) You should see an output similar to this: { 'creatorId': 'creator-id', 'lastActivity': '2019-03-29T07:36:12.214Z', 'id': 'room-id', 'title': 'Discussion', 'created': '2019-03-29T07:34:21.521Z', 'type': 'group', 'ownerId': 'consumer', 'isLocked': False, 'teamId': 'team-id' # if the room is a team } Use this information wisely.","title":"Get room details"},{"location":"rooms/#create-room","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Some of the functionality for creating a room is still being worked on, bear with us. The following should work for creating a room: from python_webex.v1.Bot import Bot bot = Bot() bot.create_room(title=\"Bot's room with best friend\", team_id=\"team-id\", room_type=\"something either 'direct' or 'group'\")","title":"Create Room"},{"location":"rooms/#update-room-details","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Currently, we can only edit the title of a room. To do so, run the following script: from python_webex.v1.Bot import Bot bot = Bot() room_id = 'room-id' bot.update_room_details(room_id=room_id, title='New Title')","title":"Update Room Details"},{"location":"rooms/#delete-a-room","text":"Always remember that you need to have already set the value auth_token as your bot's Access token before you run this any of the other examples on this tutorial. Let us wreck some havock and delete a room. This can be done through: from python_webex.v1.Bot import Bot bot = Bot() room_id = 'room-id' bot.delete_room(room_id=room_id)","title":"Delete a room"}]}